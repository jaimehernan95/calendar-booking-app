{"mappings":"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","sources":["src/app.ts"],"sourcesContent":["// Days of the week\nconst daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n// Times for the schedule\nconst times = ['9:00 AM', '10:00 AM', '11:00 AM', '12:00 PM', '1:00 PM', '2:00 PM', '3:00 PM', '4:00 PM'];\n\n// Booked slots for each month and week\nconst bookedSlots: Record<string, Record<string, string[]>> = {\n  January: {\n    'Week 1': ['9:00 AM', '10:00 AM'],\n    'Week 2': ['1:00 PM'],\n    'Week 3': ['3:00 PM'],\n    'Week 4': [],\n    'Week 5': ['2:00 PM'],\n  },\n  February: {\n    'Week 1': [],\n    'Week 2': ['9:00 AM'],\n    'Week 3': [],\n    'Week 4': ['4:00 PM'],\n    'Week 5': ['10:00 AM'],\n  },\n  // Other months...\n};\n\n// Create dropdown for month selection\nconst monthSelect = document.createElement('select');\n// Add instructions for users\nconst instructions = document.createElement('p');\ninstructions.textContent = 'Click on the day button to book the time slot';\ninstructions.style.textAlign = 'center'; // Optional: Center-align the text\ninstructions.style.margin = '10px 0'; // Optional: Add some spacing\n\n// Event listener for month change\nmonthSelect.addEventListener('change', updateSchedule);\n\nconst monthDays: Record<string, number> = {\n  January: 31,\n  February: 28, // Leap year handling can be added later\n  March: 31,\n  April: 30,\n  // Other months...\n};\n\nconst months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nmonths.forEach((month, index) => {\n  const option = document.createElement('option');\n  option.value = index.toString();\n  option.textContent = month;\n  monthSelect.appendChild(option);\n});\n\nconst container = document.getElementById('schedule-container');\ncontainer?.appendChild(monthSelect);\n\n// Update the calendar and schedule when the month is changed\nfunction updateSchedule() {\n  const selectedMonth = months[parseInt(monthSelect.value)];\n\n  // Clear existing calendar and time slots\n  const calendarContainer = document.querySelector('.calendar-container');\n  if (calendarContainer) calendarContainer.remove();\n\n  // Create new calendar view\n  createCalendarView(selectedMonth);\n}\n\n// Create the calendar view based on selected month\nfunction createCalendarView(month: string) {\n  const scheduleContainer = document.getElementById('schedule-container') as HTMLElement;\n  const calendarContainer = document.createElement('div');\n  calendarContainer.classList.add('calendar-container');\n\n  const daysInMonth = monthDays[month];\n  \n  // Create a table to display the days of the month\n  const table = document.createElement('table');\n  const headerRow = document.createElement('tr');\n\n  // Create header row for the days of the week\n  daysOfWeek.forEach((day: string) => {\n    const th = document.createElement('th');\n    th.textContent = day;\n    headerRow.appendChild(th);\n  });\n  \n  table.appendChild(headerRow);\n\n  // Create rows for each week\n  let row;\n  let dayOfMonth = 1;\n  for (let i = 0; i < 6; i++) { // Maximum 6 rows for a month\n    row = document.createElement('tr');\n    \n    // Populate each cell with the day of the month\n    for (let j = 0; j < 7; j++) {\n      const cell = document.createElement('td');\n      const dayOfWeek = (dayOfMonth + j - 1) % 7;\n\n      if (dayOfMonth <= daysInMonth) {\n        const button = createDayButton(dayOfMonth, month, daysOfWeek[dayOfWeek as number]);\n        cell.appendChild(button);\n        dayOfMonth++;\n      }\n      row.appendChild(cell);\n    }\n\n    table.appendChild(row);\n    if (dayOfMonth > daysInMonth) break;\n  }\n\n  calendarContainer.appendChild(table);\n  scheduleContainer.appendChild(calendarContainer);\n}\n\n// Create button for each day in the calendar\nfunction createDayButton(day: number, month: string, dayOfWeek: string): HTMLButtonElement {\n  const button = document.createElement('button');\n  button.textContent = `${day}`;\n  \n  button.addEventListener('click', () => {\n    displayTimeSlots(day, month);\n  });\n\n  return button;\n}\n\n// Create a global state to keep track of booked slots\nlet bookedSlotsState: { [month: string]: { [day: number]: Set<string> } } = {};\n\n// Display available time slots for a selected day\nfunction displayTimeSlots(day: number, month: string) {\n  let timeSlotsContainer = document.getElementById('time-slots-container');\n  \n  // Ensure timeSlotsContainer is properly created if it doesn't exist\n  if (!timeSlotsContainer) {\n    timeSlotsContainer = document.createElement('div');\n    timeSlotsContainer.id = 'time-slots-container';\n    document.body.appendChild(timeSlotsContainer);\n  }\n\n  // Clear existing time slots before displaying new ones\n  if (timeSlotsContainer) {\n    timeSlotsContainer.innerHTML = '';  // Clear previous content\n  }\n\n  // Get the already booked slots for the selected day\n  const availableSlots = bookedSlots[month]?.[day] || [];\n  const availableTimes = times.filter(time => !availableSlots.includes(time));\n\n  const slotTable = document.createElement('table');\n  const slotHeaderRow = document.createElement('tr');\n  const slotHeader = document.createElement('th');\n  slotHeader.textContent = `Available Time Slots for ${month} ${day}`;\n  slotHeaderRow.appendChild(slotHeader);\n  slotTable.appendChild(slotHeaderRow);\n\n  availableTimes.forEach(time => {\n    const row = document.createElement('tr');\n    const timeCell = document.createElement('td');\n    timeCell.textContent = time;\n    row.appendChild(timeCell);\n\n    const bookButtonCell = document.createElement('td');\n    const bookButton = document.createElement('button');\n    bookButton.textContent = 'Book';\n    bookButton.addEventListener('click', () => handleBooking(day, month, time, bookButton));\n    bookButtonCell.appendChild(bookButton);\n    row.appendChild(bookButtonCell);\n\n    slotTable.appendChild(row);\n  });\n\n  // Append the table with available times to the container\n  if (timeSlotsContainer) {\n    timeSlotsContainer.appendChild(slotTable);\n  }\n}\n\n// Handle the booking action when a button is clicked\nfunction handleBooking(day: number, month: string, time: string, button: HTMLButtonElement) {\n  // Check if the slot is already booked\n  if (!bookedSlotsState[month]) bookedSlotsState[month] = {};\n  if (!bookedSlotsState[month][day]) bookedSlotsState[month][day] = new Set();\n\n  // Mark the slot as booked by adding it to the set\n  bookedSlotsState[month][day].add(time);\n\n  // Update the button text and disable it\n  button.textContent = 'Booked';\n  button.disabled = true;\n  button.style.backgroundColor = 'red';\n}\n\n// Initial load\ncreateCalendarView('January');\n"],"names":[],"version":3,"file":"index.59697c84.js.map","sourceRoot":"/__parcel_source_root/"}
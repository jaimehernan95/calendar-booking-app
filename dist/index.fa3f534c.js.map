{"mappings":"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","sources":["<anon>","src/app.ts"],"sourcesContent":["// Days of the week\nconst daysOfWeek = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday'\n];\n// Times for the schedule\nconst times = [\n    '9:00 AM',\n    '10:00 AM',\n    '11:00 AM',\n    '12:00 PM',\n    '1:00 PM',\n    '2:00 PM',\n    '3:00 PM',\n    '4:00 PM'\n];\n// Booked slots for each month and week\nconst bookedSlots = {\n    January: {\n        'Week 1': [\n            '9:00 AM',\n            '10:00 AM'\n        ],\n        'Week 2': [\n            '1:00 PM'\n        ],\n        'Week 3': [\n            '3:00 PM'\n        ],\n        'Week 4': [],\n        'Week 5': [\n            '2:00 PM'\n        ]\n    },\n    February: {\n        'Week 1': [],\n        'Week 2': [\n            '9:00 AM'\n        ],\n        'Week 3': [],\n        'Week 4': [\n            '4:00 PM'\n        ],\n        'Week 5': [\n            '10:00 AM'\n        ]\n    }\n};\n// Create dropdown for month selection\nconst monthSelect = document.createElement('select');\n// Add instructions for users\nconst instructions = document.createElement('p');\ninstructions.textContent = 'Click on the day button to book the time slot';\ninstructions.style.textAlign = 'center'; // Optional: Center-align the text\ninstructions.style.margin = '10px 0'; // Optional: Add some spacing\n// Event listener for month change\nmonthSelect.addEventListener('change', updateSchedule);\nconst monthDays = {\n    January: 31,\n    February: 28,\n    March: 31,\n    April: 30\n};\nconst months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n];\nmonths.forEach((month, index)=>{\n    const option = document.createElement('option');\n    option.value = index.toString();\n    option.textContent = month;\n    monthSelect.appendChild(option);\n});\nconst container = document.getElementById('schedule-container');\ncontainer?.appendChild(monthSelect);\n// Update the calendar and schedule when the month is changed\nfunction updateSchedule() {\n    const selectedMonth = months[parseInt(monthSelect.value)];\n    // Clear existing calendar and time slots\n    const calendarContainer = document.querySelector('.calendar-container');\n    if (calendarContainer) calendarContainer.remove();\n    // Create new calendar view\n    createCalendarView(selectedMonth);\n}\n// Create the calendar view based on selected month\nfunction createCalendarView(month) {\n    const scheduleContainer = document.getElementById('schedule-container');\n    const calendarContainer = document.createElement('div');\n    calendarContainer.classList.add('calendar-container');\n    const daysInMonth = monthDays[month];\n    // Create a table to display the days of the month\n    const table = document.createElement('table');\n    const headerRow = document.createElement('tr');\n    // Create header row for the days of the week\n    daysOfWeek.forEach((day)=>{\n        const th = document.createElement('th');\n        th.textContent = day;\n        headerRow.appendChild(th);\n    });\n    table.appendChild(headerRow);\n    // Create rows for each week\n    let row;\n    let dayOfMonth = 1;\n    for(let i = 0; i < 6; i++){\n        row = document.createElement('tr');\n        // Populate each cell with the day of the month\n        for(let j = 0; j < 7; j++){\n            const cell = document.createElement('td');\n            const dayOfWeek = (dayOfMonth + j - 1) % 7;\n            if (dayOfMonth <= daysInMonth) {\n                const button = createDayButton(dayOfMonth, month, daysOfWeek[dayOfWeek]);\n                cell.appendChild(button);\n                dayOfMonth++;\n            }\n            row.appendChild(cell);\n        }\n        table.appendChild(row);\n        if (dayOfMonth > daysInMonth) break;\n    }\n    calendarContainer.appendChild(table);\n    scheduleContainer.appendChild(calendarContainer);\n}\n// Create button for each day in the calendar\nfunction createDayButton(day, month, dayOfWeek) {\n    const button = document.createElement('button');\n    button.textContent = `${day}`;\n    button.addEventListener('click', ()=>{\n        displayTimeSlots(day, month);\n    });\n    return button;\n}\n// Create a global state to keep track of booked slots\nlet bookedSlotsState = {};\n// Display available time slots for a selected day\nfunction displayTimeSlots(day, month) {\n    let timeSlotsContainer = document.getElementById('time-slots-container');\n    // Ensure timeSlotsContainer is properly created if it doesn't exist\n    if (!timeSlotsContainer) {\n        timeSlotsContainer = document.createElement('div');\n        timeSlotsContainer.id = 'time-slots-container';\n        document.body.appendChild(timeSlotsContainer);\n    }\n    // Clear existing time slots before displaying new ones\n    if (timeSlotsContainer) timeSlotsContainer.innerHTML = ''; // Clear previous content\n    // Get the already booked slots for the selected day\n    const availableSlots = bookedSlots[month]?.[day] || [];\n    const availableTimes = times.filter((time)=>!availableSlots.includes(time));\n    const slotTable = document.createElement('table');\n    const slotHeaderRow = document.createElement('tr');\n    const slotHeader = document.createElement('th');\n    slotHeader.textContent = `Available Time Slots for ${month} ${day}`;\n    slotHeaderRow.appendChild(slotHeader);\n    slotTable.appendChild(slotHeaderRow);\n    availableTimes.forEach((time)=>{\n        const row = document.createElement('tr');\n        const timeCell = document.createElement('td');\n        timeCell.textContent = time;\n        row.appendChild(timeCell);\n        const bookButtonCell = document.createElement('td');\n        const bookButton = document.createElement('button');\n        bookButton.textContent = 'Book';\n        bookButton.addEventListener('click', ()=>handleBooking(day, month, time, bookButton));\n        bookButtonCell.appendChild(bookButton);\n        row.appendChild(bookButtonCell);\n        slotTable.appendChild(row);\n    });\n    // Append the table with available times to the container\n    if (timeSlotsContainer) timeSlotsContainer.appendChild(slotTable);\n}\n// Handle the booking action when a button is clicked\nfunction handleBooking(day, month, time, button) {\n    // Check if the slot is already booked\n    if (!bookedSlotsState[month]) bookedSlotsState[month] = {};\n    if (!bookedSlotsState[month][day]) bookedSlotsState[month][day] = new Set();\n    // Mark the slot as booked by adding it to the set\n    bookedSlotsState[month][day].add(time);\n    // Update the button text and disable it\n    button.textContent = 'Booked';\n    button.disabled = true;\n    button.style.backgroundColor = 'red';\n}\n// Initial load\ncreateCalendarView('January');\n\n//# sourceMappingURL=index.fa3f534c.js.map\n","// Days of the week\nconst daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n// Times for the schedule\nconst times = ['9:00 AM', '10:00 AM', '11:00 AM', '12:00 PM', '1:00 PM', '2:00 PM', '3:00 PM', '4:00 PM'];\n\n// Booked slots for each month and week\nconst bookedSlots: Record<string, Record<string, string[]>> = {\n  January: {\n    'Week 1': ['9:00 AM', '10:00 AM'],\n    'Week 2': ['1:00 PM'],\n    'Week 3': ['3:00 PM'],\n    'Week 4': [],\n    'Week 5': ['2:00 PM'],\n  },\n  February: {\n    'Week 1': [],\n    'Week 2': ['9:00 AM'],\n    'Week 3': [],\n    'Week 4': ['4:00 PM'],\n    'Week 5': ['10:00 AM'],\n  },\n  // Other months...\n};\n\n// Create dropdown for month selection\nconst monthSelect = document.createElement('select');\n// Add instructions for users\nconst instructions = document.createElement('p');\ninstructions.textContent = 'Click on the day button to book the time slot';\ninstructions.style.textAlign = 'center'; // Optional: Center-align the text\ninstructions.style.margin = '10px 0'; // Optional: Add some spacing\n\n// Event listener for month change\nmonthSelect.addEventListener('change', updateSchedule);\n\nconst monthDays: Record<string, number> = {\n  January: 31,\n  February: 28, // Leap year handling can be added later\n  March: 31,\n  April: 30,\n  // Other months...\n};\n\nconst months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nmonths.forEach((month, index) => {\n  const option = document.createElement('option');\n  option.value = index.toString();\n  option.textContent = month;\n  monthSelect.appendChild(option);\n});\n\nconst container = document.getElementById('schedule-container');\ncontainer?.appendChild(monthSelect);\n\n// Update the calendar and schedule when the month is changed\nfunction updateSchedule() {\n  const selectedMonth = months[parseInt(monthSelect.value)];\n\n  // Clear existing calendar and time slots\n  const calendarContainer = document.querySelector('.calendar-container');\n  if (calendarContainer) calendarContainer.remove();\n\n  // Create new calendar view\n  createCalendarView(selectedMonth);\n}\n\n// Create the calendar view based on selected month\nfunction createCalendarView(month: string) {\n  const scheduleContainer = document.getElementById('schedule-container') as HTMLElement;\n  const calendarContainer = document.createElement('div');\n  calendarContainer.classList.add('calendar-container');\n\n  const daysInMonth = monthDays[month];\n  \n  // Create a table to display the days of the month\n  const table = document.createElement('table');\n  const headerRow = document.createElement('tr');\n\n  // Create header row for the days of the week\n  daysOfWeek.forEach((day: string) => {\n    const th = document.createElement('th');\n    th.textContent = day;\n    headerRow.appendChild(th);\n  });\n  \n  table.appendChild(headerRow);\n\n  // Create rows for each week\n  let row;\n  let dayOfMonth = 1;\n  for (let i = 0; i < 6; i++) { // Maximum 6 rows for a month\n    row = document.createElement('tr');\n    \n    // Populate each cell with the day of the month\n    for (let j = 0; j < 7; j++) {\n      const cell = document.createElement('td');\n      const dayOfWeek = (dayOfMonth + j - 1) % 7;\n\n      if (dayOfMonth <= daysInMonth) {\n        const button = createDayButton(dayOfMonth, month, daysOfWeek[dayOfWeek as number]);\n        cell.appendChild(button);\n        dayOfMonth++;\n      }\n      row.appendChild(cell);\n    }\n\n    table.appendChild(row);\n    if (dayOfMonth > daysInMonth) break;\n  }\n\n  calendarContainer.appendChild(table);\n  scheduleContainer.appendChild(calendarContainer);\n}\n\n// Create button for each day in the calendar\nfunction createDayButton(day: number, month: string, dayOfWeek: string): HTMLButtonElement {\n  const button = document.createElement('button');\n  button.textContent = `${day}`;\n  \n  button.addEventListener('click', () => {\n    displayTimeSlots(day, month);\n  });\n\n  return button;\n}\n\n// Create a global state to keep track of booked slots\nlet bookedSlotsState: { [month: string]: { [day: number]: Set<string> } } = {};\n\n// Display available time slots for a selected day\nfunction displayTimeSlots(day: number, month: string) {\n  let timeSlotsContainer = document.getElementById('time-slots-container');\n  \n  // Ensure timeSlotsContainer is properly created if it doesn't exist\n  if (!timeSlotsContainer) {\n    timeSlotsContainer = document.createElement('div');\n    timeSlotsContainer.id = 'time-slots-container';\n    document.body.appendChild(timeSlotsContainer);\n  }\n\n  // Clear existing time slots before displaying new ones\n  if (timeSlotsContainer) {\n    timeSlotsContainer.innerHTML = '';  // Clear previous content\n  }\n\n  // Get the already booked slots for the selected day\n  const availableSlots = bookedSlots[month]?.[day] || [];\n  const availableTimes = times.filter(time => !availableSlots.includes(time));\n\n  const slotTable = document.createElement('table');\n  const slotHeaderRow = document.createElement('tr');\n  const slotHeader = document.createElement('th');\n  slotHeader.textContent = `Available Time Slots for ${month} ${day}`;\n  slotHeaderRow.appendChild(slotHeader);\n  slotTable.appendChild(slotHeaderRow);\n\n  availableTimes.forEach(time => {\n    const row = document.createElement('tr');\n    const timeCell = document.createElement('td');\n    timeCell.textContent = time;\n    row.appendChild(timeCell);\n\n    const bookButtonCell = document.createElement('td');\n    const bookButton = document.createElement('button');\n    bookButton.textContent = 'Book';\n    bookButton.addEventListener('click', () => handleBooking(day, month, time, bookButton));\n    bookButtonCell.appendChild(bookButton);\n    row.appendChild(bookButtonCell);\n\n    slotTable.appendChild(row);\n  });\n\n  // Append the table with available times to the container\n  if (timeSlotsContainer) {\n    timeSlotsContainer.appendChild(slotTable);\n  }\n}\n\n// Handle the booking action when a button is clicked\nfunction handleBooking(day: number, month: string, time: string, button: HTMLButtonElement) {\n  // Check if the slot is already booked\n  if (!bookedSlotsState[month]) bookedSlotsState[month] = {};\n  if (!bookedSlotsState[month][day]) bookedSlotsState[month][day] = new Set();\n\n  // Mark the slot as booked by adding it to the set\n  bookedSlotsState[month][day].add(time);\n\n  // Update the button text and disable it\n  button.textContent = 'Booked';\n  button.disabled = true;\n  button.style.backgroundColor = 'red';\n}\n\n// Initial load\ncreateCalendarView('January');\n"],"names":["daysOfWeek","times","bookedSlots","January","February","monthSelect","document","createElement","instructions","textContent","style","textAlign","margin","addEventListener","selectedMonth","months","parseInt","value","calendarContainer","querySelector","remove","createCalendarView","monthDays","March","April","forEach","month","index","option","toString","appendChild","container","getElementById","row","scheduleContainer","classList","add","daysInMonth","table","headerRow","day","th","dayOfMonth","i","j","cell","dayOfWeek","button","createDayButton","displayTimeSlots","timeSlotsContainer","id","body","innerHTML","availableSlots","availableTimes","filter","time","includes","slotTable","slotHeaderRow","slotHeader","timeCell","bookButtonCell","bookButton","bookedSlotsState","Set","disabled","backgroundColor"],"version":3,"file":"index.fa3f534c.js.map"}